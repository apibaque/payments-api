/*
 * Gosocket Payment API
 * Synchronize payments API
 *
 * OpenAPI spec version: v1
 * Contact: developerteam@gosocket.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.notification.api;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import org.threeten.bp.OffsetDateTime;

import io.swagger.client.notification.ApiCallback;
import io.swagger.client.notification.ApiClient;
import io.swagger.client.notification.ApiException;
import io.swagger.client.notification.ApiResponse;
import io.swagger.client.notification.Configuration;
import io.swagger.client.notification.Pair;
import io.swagger.client.notification.ProgressRequestBody;
import io.swagger.client.notification.ProgressResponseBody;
import io.swagger.client.notification.model.GosocketPaymentApiModelsPaidDocument;
import io.swagger.client.notification.model.GosocketPaymentDataModelsRedbancRedbancPaymentModel;
import io.swagger.client.notification.model.SystemObject;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConciliationApi {
    private ApiClient apiClient;

    public ConciliationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConciliationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for conciliationGetPaidDocuments
     * @param from Fecha inicial del rango (required)
     * @param to Fecha final del rango (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call conciliationGetPaidDocumentsCall(OffsetDateTime from, OffsetDateTime to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Conciliation/GetPaidDocuments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call conciliationGetPaidDocumentsValidateBeforeCall(OffsetDateTime from, OffsetDateTime to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling conciliationGetPaidDocuments(Async)");
        }
        
        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling conciliationGetPaidDocuments(Async)");
        }
        

        com.squareup.okhttp.Call call = conciliationGetPaidDocumentsCall(from, to, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retorna lista de documentos pagados en un rango de fecha
     * Retorna una lista de objetos \&quot;PaidDocument\&quot; que fueron pagados en un rago de fecha definidos en los parámetros a través de Gosocket
     * @param from Fecha inicial del rango (required)
     * @param to Fecha final del rango (required)
     * @return List&lt;GosocketPaymentApiModelsPaidDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<GosocketPaymentApiModelsPaidDocument> conciliationGetPaidDocuments(OffsetDateTime from, OffsetDateTime to) throws ApiException {
        ApiResponse<List<GosocketPaymentApiModelsPaidDocument>> resp = conciliationGetPaidDocumentsWithHttpInfo(from, to);
        return resp.getData();
    }

    /**
     * Retorna lista de documentos pagados en un rango de fecha
     * Retorna una lista de objetos \&quot;PaidDocument\&quot; que fueron pagados en un rago de fecha definidos en los parámetros a través de Gosocket
     * @param from Fecha inicial del rango (required)
     * @param to Fecha final del rango (required)
     * @return ApiResponse&lt;List&lt;GosocketPaymentApiModelsPaidDocument&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<GosocketPaymentApiModelsPaidDocument>> conciliationGetPaidDocumentsWithHttpInfo(OffsetDateTime from, OffsetDateTime to) throws ApiException {
        com.squareup.okhttp.Call call = conciliationGetPaidDocumentsValidateBeforeCall(from, to, null, null);
        Type localVarReturnType = new TypeToken<List<GosocketPaymentApiModelsPaidDocument>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retorna lista de documentos pagados en un rango de fecha (asynchronously)
     * Retorna una lista de objetos \&quot;PaidDocument\&quot; que fueron pagados en un rago de fecha definidos en los parámetros a través de Gosocket
     * @param from Fecha inicial del rango (required)
     * @param to Fecha final del rango (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call conciliationGetPaidDocumentsAsync(OffsetDateTime from, OffsetDateTime to, final ApiCallback<List<GosocketPaymentApiModelsPaidDocument>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = conciliationGetPaidDocumentsValidateBeforeCall(from, to, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<GosocketPaymentApiModelsPaidDocument>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for conciliationRedbancConfirm
     * @param model  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call conciliationRedbancConfirmCall(GosocketPaymentDataModelsRedbancRedbancPaymentModel model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/Conciliation/RedbancConfirm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call conciliationRedbancConfirmValidateBeforeCall(GosocketPaymentDataModelsRedbancRedbancPaymentModel model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling conciliationRedbancConfirm(Async)");
        }
        

        com.squareup.okhttp.Call call = conciliationRedbancConfirmCall(model, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Recibe la confirmación del estado final de un pago
     * Retorna recepción conforme del pago
     * @param model  (required)
     * @return SystemObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SystemObject conciliationRedbancConfirm(GosocketPaymentDataModelsRedbancRedbancPaymentModel model) throws ApiException {
        ApiResponse<SystemObject> resp = conciliationRedbancConfirmWithHttpInfo(model);
        return resp.getData();
    }

    
    public String conciliationRedbancConfirm1(GosocketPaymentDataModelsRedbancRedbancPaymentModel model) throws ApiException {
        ApiResponse<String> resp = conciliationRedbancConfirmWithHttpInfo1(model);
        return resp.getData().toString();
    }
    /**
     * Recibe la confirmación del estado final de un pago
     * Retorna recepción conforme del pago
     * @param model  (required)
     * @return ApiResponse&lt;SystemObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SystemObject> conciliationRedbancConfirmWithHttpInfo(GosocketPaymentDataModelsRedbancRedbancPaymentModel model) throws ApiException {
        com.squareup.okhttp.Call call = conciliationRedbancConfirmValidateBeforeCall(model, null, null);
        Type localVarReturnType = new TypeToken<SystemObject>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }
    
    /**
     * Recibe la confirmación del estado final de un pago
     * Retorna recepción conforme del pago
     * @param model  (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    
    public ApiResponse<String> conciliationRedbancConfirmWithHttpInfo1(GosocketPaymentDataModelsRedbancRedbancPaymentModel model) throws ApiException {
        com.squareup.okhttp.Call call = conciliationRedbancConfirmValidateBeforeCall(model, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Recibe la confirmación del estado final de un pago (asynchronously)
     * Retorna recepción conforme del pago
     * @param model  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call conciliationRedbancConfirmAsync(GosocketPaymentDataModelsRedbancRedbancPaymentModel model, final ApiCallback<SystemObject> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = conciliationRedbancConfirmValidateBeforeCall(model, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SystemObject>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for conciliationStatus
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call conciliationStatusCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Conciliation/Status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basic" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call conciliationStatusValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = conciliationStatusCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Status of this instance.
     * Status of this instance. This method call will help you determine whether the service is running or not. Will return \&quot;OK\&quot; if running
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String conciliationStatus() throws ApiException {
        ApiResponse<String> resp = conciliationStatusWithHttpInfo();
        return resp.getData();
    }

    /**
     * Status of this instance.
     * Status of this instance. This method call will help you determine whether the service is running or not. Will return \&quot;OK\&quot; if running
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> conciliationStatusWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = conciliationStatusValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Status of this instance. (asynchronously)
     * Status of this instance. This method call will help you determine whether the service is running or not. Will return \&quot;OK\&quot; if running
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call conciliationStatusAsync(final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = conciliationStatusValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
